.util-spacing(@breakpoint:"base") {
  .setInfix(@bp) when (@bp = "base") {
    @infix: ~"";
    .display-spacing-margin(@infix);
    .display-spacing-padding(@infix);
  }

  .setInfix(@bp) when (default()) {
    @infix: ~"-@{breakpoint}";

    .display-spacing-margin(@infix);
    .display-spacing-padding(@infix);
  }

  .setInfix(@breakpoint);
}

.display-spacing-margin(@infix) {
  each(@spacers, {
        .m@{infix}-@{key} { margin: @value !important; }
        .mx@{infix}-@{key} { margin-right: @value !important; margin-left: @value !important; }
        .my@{infix}-@{key} { margin-top: @value !important; margin-bottom: @value !important; }
        .mt@{infix}-@{key} { margin-top: @value !important; }
        .mr@{infix}-@{key} { margin-right: @value !important; }
        .mb@{infix}-@{key} { margin-bottom: @value !important; }
        .ml@{infix}-@{key} { margin-left: @value !important; }
    });
}

.display-spacing-padding(@infix) {
  each(@spacers, {
          .p@{infix}-@{key} { padding: @value !important; }
          .px@{infix}-@{key} { padding-right: @value !important; padding-left: @value !important; }
          .py@{infix}-@{key} { padding-top: @value !important; padding-bottom: @value !important; }
          .pt@{infix}-@{key} { padding-top: @value !important; }
          .pr@{infix}-@{key} { padding-right: @value !important; }
          .pb@{infix}-@{key} { padding-bottom: @value !important; }
          .pl@{infix}-@{key} { padding-left: @value !important; }
      });
}

// Generate base mobile classes
.util-spacing();

// Generate breakpoint-specific classes
each(@breakpoints, {
    @media (min-width: @value) {
        .util-spacing(@key);
    }
});
